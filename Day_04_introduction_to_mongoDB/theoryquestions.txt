1 : What is a NoSQL Database, and explain the types of NoSQL database?
-->NoSQL Database
A NoSQL database is designed for flexible, scalable storage and retrieval of data, accommodating large-scale and high-performance applications without requiring a fixed schema.

Types of NoSQL Databases
Document Databases

Format: JSON/BSON documents.
Use Cases: Content management, e-commerce.
Examples: MongoDB, CouchDB.
Key-Value Stores

Format: Key-value pairs.
Use Cases: Caching, session management.
Examples: Redis, DynamoDB.
Column-Family Stores

Format: Columns and rows.
Use Cases: Time-series data, data warehousing.
Examples: Cassandra, HBase.
Graph Databases

Format: Nodes and edges.
Use Cases: Social networks, recommendation engines.
Examples: Neo4j, Amazon Neptune.
Object-Oriented Databases

Format: Objects.
Use Cases: Complex data structures.
Examples: db4o, ObjectDB.
Time-Series Databases

Format: Time-series data.
Use Cases: Monitoring, IoT data.
Examples: InfluxDB, TimescaleDB.
Multimodel Databases

Format: Multiple models (document, graph, key-value).
Use Cases: Complex applications.
Examples: ArangoDB, OrientDB.


2:What is the difference between SQL and NoSQL databases?
-->SQL vs NoSQL Databases
1. Data Model:

SQL: Uses structured tables with rows and columns.
NoSQL: Uses various data models including documents, key-value pairs, wide-column stores, and graph databases.
2. Schema:

SQL: Requires a predefined schema with fixed columns.
NoSQL: Schema-less or flexible schemas, allowing for dynamic data structure changes.
3. Scalability:

SQL: Typically scales vertically by adding more power to a single server.
NoSQL: Scales horizontally by adding more servers to distribute the load.
4. Transactions:

SQL: Ensures ACID properties (Atomicity, Consistency, Isolation, Durability) for reliable transactions.
NoSQL: Often uses BASE (Basically Available, Soft state, Eventual consistency) for higher availability and scalability.
5. Query Language:

SQL: Uses Structured Query Language (SQL) for defining and manipulating data.
NoSQL: Uses various query languages specific to the database type (e.g., MongoDB uses JSON-like queries, Cassandra uses CQL).
6. Use Cases:

SQL: Suitable for applications requiring complex queries, multi-row transactions, and strong data integrity (e.g., financial systems, enterprise applications).
NoSQL: Suitable for applications requiring large-scale data storage, real-time analytics, and flexible data models (e.g., big data applications, content management systems).
7. Examples:

SQL: MySQL, PostgreSQL, Oracle, Microsoft SQL Server.
NoSQL: MongoDB, Redis, Cassandra, CouchDB, Neo4j.
8. Consistency:

SQL: Strong consistency, ensuring immediate consistency across the database.
NoSQL: Eventual consistency in many systems, allowing for higher availability and partition tolerance.
9. Flexibility:

SQL: Less flexible, requires changes to the schema when modifying the structure.
NoSQL: Highly flexible, accommodating evolving data models without requiring significant structural changes
----------------------------------------------------------------------------------------------------------------------------
3:How to choose between MongoDB and MySQL based on your requirements?
-->Choose MySQL if:

Your data is highly structured and relational.
You need complex queries and transaction support.
Your application requires strong ACID compliance.
You prefer a well-established ecosystem with mature tooling.
Choose MongoDB if:

Your data is semi-structured or unstructured and requires a flexible schema.
You need to scale horizontally and handle large volumes of data.
Your application benefits from rapid development and iteration.
You need flexible querying capabilities and can tolerate eventual consistency.
----------------------------------------------------------------------------------------------------------------------------------
4:What are collections and documents in a MongoDB database?
-->
In MongoDB, collections and documents are fundamental concepts that define the structure of the database:

Collections
Definition: Collections in MongoDB are equivalent to tables in relational databases. They are containers for documents and can be thought of as a group of documents that are stored together.
Characteristics:
Dynamic Schema: Collections in MongoDB have a flexible schema, meaning documents within a collection do not need to have the same fields, and data types for the fields can vary across documents.
Implicit Creation: Collections are created automatically when a document is inserted if they do not already exist.
Explicit Creation: Collections can also be created explicitly using commands like createCollection.
Documents
Definition: Documents in MongoDB are equivalent to rows in relational databases. They represent individual records in a collection.
Characteristics:
BSON Format: Documents are stored in BSON (Binary JSON) format, which allows for rich data types and efficient storage.
Flexible Structure: Each document can have a different structure, meaning different fields and data types can exist in the same collection.
Key-Value Pairs: Documents are composed of field and value pairs, similar to JSON objects.

---------------------------------------------------------------------------------------------------------------------------------------------------------
5:What is BSON? What is the difference between BSON and JSON?
-->BSON (Binary JSON) is a binary-encoded serialization of JSON-like documents. It stands for "Binary JavaScript Object Notation." BSON is used primarily by MongoDB as a data storage and network transfer format.

Characteristics of BSON:
Binary Format: Unlike JSON, which is text-based, BSON is a binary format. This makes it more efficient for storage and parsing.
Support for Additional Data Types: BSON supports a wider range of data types than JSON, such as:
Date: BSON has a dedicated date type.
Binary Data: BSON supports the storage of binary data.
Embedded Documents and Arrays: Similar to JSON but in a more compact form.
32-bit and 64-bit Integers: Specific integer types for optimized storage and performance.
Floating Point Numbers: For storing floating-point numbers more efficiently.
Efficient Traversal: BSON is designed to be efficient both in storage space and in scanning speed, allowing for quick access to data elements within the document.
Ordered Fields: BSON maintains the order of keys in the document.
Differences Between BSON and JSON:
Feature	BSON	JSON
Format	Binary	Text-based
Serialization	Binary-encoded	Text-encoded
Data Types	Supports more types (Date, Binary, Int, Float)	Limited to basic types (String, Number, Object, Array, Boolean, Null)
Efficiency	More efficient for storage and parsing	Less efficient for storage and parsing
Size	Generally larger due to metadata overhead	More compact in simple structures
Use Case	Optimized for MongoDB and network transfers	General-purpose data interchange
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6:What are MongoDB Compass and MongoDB Shell used for?
-->MongoDB Compass
MongoDB Compass is a graphical user interface (GUI) tool provided by MongoDB. It allows users to interact with their MongoDB databases in a visual and user-friendly way.

Key Features:
Schema Visualization: Compass can analyze and visualize the structure of the data stored in MongoDB, helping users understand their collections better.
Query Building: Users can build queries using a visual interface without writing raw MongoDB queries. It supports filtering, sorting, and aggregations.
Data Exploration: Provides a way to browse and interact with data in the collections. Users can view documents, update them, and perform CRUD (Create, Read, Update, Delete) operations.
Index Management: Allows users to create, view, and manage indexes to optimize query performance.
Performance Analysis: Offers tools to analyze the performance of queries and identify potential issues.
MongoDB Shell
MongoDB Shell (mongosh) is a command-line interface (CLI) for interacting with MongoDB instances. It is designed for users who are comfortable with a command-line environment and prefer scripting their database operations.

Key Features:
Command-Line Access: Provides direct access to MongoDB databases via the terminal, allowing for efficient and powerful operations.
Query Execution: Users can write and execute MongoDB queries, commands, and scripts directly in the shell.
Scripting: Allows for the creation and execution of JavaScript scripts to automate repetitive tasks and complex operations.
Database Management: Enables users to perform administrative tasks such as managing users, roles, and permissions.
Integration with Tools: Often used in conjunction with other command-line tools and scripts for automated workflows and deployments.
Use Cases:
MongoDB Compass:

Ideal for users who prefer a graphical interface for interacting with databases.
Useful for data exploration, visualizing schema, and performance analysis.
Suitable for non-technical users or those who are new to MongoDB.
MongoDB Shell:

Preferred by users who are comfortable with command-line tools.
Useful for running ad-hoc queries, scripting, and automation.
Suitable for database administrators and developers who need to perform advanced operations and scripting.
--------------------------------------------------------------------------------------------------------------------------------------
7:How to create collections in MongoDB?
-->use myDatabase
db.createCollection("myNewCollection")
----------------------------------------------------------------------
8:What is the difference between insertMany and insertOne?
-->insertOne
Purpose: Inserts a single document into a collection.

db.collection.insertOne(document, options)
document: The document to be inserted.
options (optional): Additional options like write concern.
Example:

db.users.insertOne({ name: "Alice", age: 30 })
Returns: An InsertOneResult object that contains details of the operation, including the inserted document’s _id.

Use Case: Use insertOne when you need to insert a single document and don’t need to handle multiple documents at once.

insertMany
Purpose: Inserts multiple documents into a collection in a single operation.

db.collection.insertMany(documents, options)

----------------------------------------------------------------------------------------
9:What is the difference between deleteOne and deleteMany?
-->deleteOne
Purpose: Deletes a single document that matches the specified filter.
db.collection.deleteOne(filter, options)
filter: A query document that specifies the criteria for selecting the document to be deleted.
options (optional): Additional options like write concern.

db.users.deleteOne({ name: "Alice" })
This will delete the first document that matches the { name: "Alice" } filter. If there are multiple documents with that name, only the first one found will be deleted.

Returns: A DeleteResult object that contains information about the deletion, including the number of documents deleted (should be 0 or 1).

Use Case: Use deleteOne when you need to delete a single document that matches a specific condition.

deleteMany
Purpose: Deletes all documents that match the specified filter.


db.collection.deleteMany(filter, options)
filter: A query document that specifies the criteria for selecting documents to be deleted.

db.users.deleteMany({ age: { $lt: 30 } })
This will delete all documents where the age field is less than 30.

Returns: A DeleteResult object that contains information about the deletion, including the number of documents deleted.

Use Case: Use deleteMany when you need to delete multiple documents that match the filter criteria.


--------------------------------------------------------------------------------------------------------------------------
10:How to read data in MongoDB? What is the difference between find and findOne?
find
Purpose: Retrieves multiple documents that match the specified query criteria.

db.collection.find(query, projection)
query: A query document specifying the criteria for the documents to be retrieved.
projection (optional): Specifies which fields to include or exclude in the returned documents.

db.users.find({ age: { $gte: 18 } })
This retrieves all documents in the users collection where the age field is greater than or equal to 18.

Returns: A cursor, which you can iterate over to access the documents. In most client libraries, this will be an array of documents.

Use Case: Use find when you need to retrieve multiple documents that match a certain criteria.

findOne
Purpose: Retrieves a single document that matches the specified query criteria.

db.collection.findOne(query, projection)
query: A query document specifying the criteria for the document to be retrieved.
projection (optional): Specifies which fields to include or exclude in the returned document.

db.users.findOne({ name: "Alice" })
This retrieves the first document in the users collection where the name field is "Alice".

Returns: A single document (or null if no document matches the query).

Use Case: Use findOne when you need to retrieve a single document based on the query criteria, typically when you expect only one document or want only the first matching document.
------------------------------------------------------------------------------------------------------------------------------------------------
11:What is $set in MongoDB?
-->$set:
Function: Modifies the value of an existing field or adds a new field.
Usage: Useful for updating specific fields in documents while preserving other fields.
Key Points
If the field specified in $set already exists, its value will be updated.
If the field does not exist, $set will create it and assign the given value.
$set does not affect other fields in the document.
--------------------------------------------------------------------------------------
12:How to filter data using MongoDB?
Filtering data in MongoDB involves using queries to specify criteria for retrieving documents from a collection. Here’s how you can filter data using MongoDB:
Basic Query Filtering
Equality Check:
Retrieve documents where a field matches a specific value.
db.collection.find({ field: value })
Example:
db.users.find({ age: 25 })
Comparison Operators:
Use operators to filter based on comparisons.
Greater Than:
db.collection.find({ field: { $gt: value } })
Example:
db.products.find({ price: { $gt: 100 } })